Palavras reservadas são identificadores que possui uma finalidade específica, portanto não podem
ser utilizadas para nomear variáveis, classes, métodos ou atributos.

A linguagem Java possui 52 palavras reservadas, sendo elas:

Controle de pacotes

import: importa pacotes ou classes para dentro do código
package: especifica a que pacotes todas as classes de um arquivo pertencem

Modificadores de acesso

public: acesso de qualquer classes
private: acesso apenas dentro da classes
protected: acesso por classes no meso pacote e subclasses

Primitivo

byte: um inteiro de 8 bits (signed)
char: um character unicode (16 bit unsigned)
double: um número de ponto flutuante de 64 bits (signed)
float: um número de ponto flutuante de 32 bits (signed)
int: um inteiro de 32 bits (signed)
long: um inteiro de 64 bits (signed)
short: um inteiro de 32 bits (signed)
void: indica que o método não tem retorno de valor

Modificadores de classes, variáveis ou métodos

abstract: classe que não pode ser instanciada ou método que precisa ser implementado por uma
subclasse não abstrata
class: especifica uma classe
extends: indica uma superclasse que a subclasse está estendendo
final: impossibilita que uma classe seja estendida, que um método seja sobrescrito ou que uma variável
seja reinicializada
implements: indica as interfaces que uma classe irá implementar
interface: especifica uma interface
native: indica que um método está escrito em uma linguagem dependente de plataforma, como o C
new: instancia um novo objeto, chamando seu construtor
static: faz um método ou variável pertencer à classe ao invés de às instâncias
strictfp: usado em frente a um método ou classe para indicar que os números de ponto flutuante seguirão as
regras de ponto flutuante em todas as expressões
synchronized: indica que um método só pode ser acessado por uma thread de cada vez
transient: impede a serialização de campos
volatile: indica que uma variável pode ser alterada durante o uso de threads

Controle de fluxo de um bloco de código

break: sai do bloco de código em que está
case: executa um bloco de código dependendo do teste do switch
continue: pula a execução do código que viria após essa linha e vai para próxima passagem de loop

Tratamento de erros

assert: testa uma expressão condicional para verificar uma suposição do programador
catch: detecta o bloco de código usado para tratar uma exceção 
finally: bloco de código, após um try-catch, que é executado independentemente do fluxo de
programa seguido ao lidar com uma exceção
throw: usado para passar uma exceção para o método que o chamou
throws: indica que um método pode passar uma exceção para o método que o chamou
try: bloco de código que tentará ser executado, mas pode causar uma exceção

Variáveis de referência

super: refere-se a superclasse imediata
this: refere-se a instância atual do objeto

Escopo de uso

Arquivo: package, import, static
Classe: public ou protected ou private + final ou abstract + extends ou implements
Método: public oou protected ou private + static ou final ou abstract + void e return
Atributo: public ou protected ou private + static ou final + tipo primitivo



